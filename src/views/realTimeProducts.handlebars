<p><a href="/">⬅ Volver a Home</a></p>

<h1>Productos en Tiempo Real</h1>

<style>
  .wrap { display: grid; grid-template-columns: 1fr 1fr; gap: 24px; align-items:start; }
  form { border: 1px solid #ddd; border-radius: 8px; padding: 16px; }
  form h2 { margin-top: 0; font-size: 18px; }
  label { display:block; margin: 8px 0 4px; font-weight: 600; }
  input, textarea, select { width: 100%; padding: 8px; box-sizing: border-box; }
  button { margin-top: 12px; padding: 8px 12px; cursor: pointer; }
  .muted { color:#666; font-size: 12px; }
</style>

<div class="wrap">
  <div>
    <h2>Listado</h2>
    <ul id="product-list">
      {{#each products}}
        <li data-id="{{this.id}}">#{{this.id}} — {{this.title}} - ${{this.price}}</li>
      {{/each}}
    </ul>
    <p class="muted">Click en un producto para autocompletar el ID en los formularios de eliminar o actualizar.</p>
  </div>

  <div>
    <!-- Crear producto -->
    <form id="create-form">
      <h2>Crear producto</h2>
      <label>Título</label>
      <input name="title" required placeholder="Ej: Campera" />
      <label>Descripción</label>
      <textarea name="description" rows="2" required placeholder="Ej: Campera negra"></textarea>
      <label>Código (único)</label>
      <input name="code" required placeholder="Ej: SKU-003" />
      <label>Precio</label>
      <input name="price" type="number" min="0" step="1" required />
      <label>Stock</label>
      <input name="stock" type="number" min="0" step="1" required />
      <label>Categoría</label>
      <input name="category" required />
      <label>Status</label>
      <select name="status">
        <option value="true" selected>Activo</option>
        <option value="false">Inactivo</option>
      </select>
      <label>Thumbnails (opcional, separá por comas)</label>
      <input name="thumbnails" />
      <button type="submit">Crear</button>
      <div id="create-msg" class="muted"></div>
    </form>

    <!-- Eliminar por ID -->
    <form id="delete-form">
      <h2>Eliminar producto</h2>
      <label>ID del producto</label>
      <input name="id" type="number" min="1" required />
      <button type="submit">Eliminar</button>
      <div id="delete-msg" class="muted"></div>
    </form>

    <!-- Actualizar por ID -->
    <form id="update-form">
      <h2>Actualizar producto</h2>
      <label>ID del producto</label>
      <input name="id" type="number" min="1" required />
      <label>Nuevo precio</label>
      <input name="price" type="number" min="0" step="1" />
      <label>Nuevo stock</label>
      <input name="stock" type="number" min="0" step="1" />
      <button type="submit">Actualizar</button>
      <div id="update-msg" class="muted"></div>
    </form>
  </div>
</div>

<script src="/socket.io/socket.io.js"></script>
<script>
  const socket = io();
  socket.on('productsUpdated', renderList);

  function renderList(products) {
    const list = document.getElementById('product-list');
    list.innerHTML = '';
    products.forEach(p => {
      const li = document.createElement('li');
      li.dataset.id = p.id;
      li.textContent = `#${p.id} — ${p.title} - $${p.price}`;
      li.style.cursor = 'pointer';
      li.title = 'Click para autocompletar el ID';
      li.addEventListener('click', () => {
        document.querySelector('#delete-form [name="id"]').value = p.id;
        document.querySelector('#update-form [name="id"]').value = p.id;
      });
      list.appendChild(li);
    });
  }

  async function jsonFetch(url, options = {}) {
    const res = await fetch(url, {
      headers: { 'Content-Type': 'application/json' },
      ...options
    });
    const data = await res.json().catch(() => ({}));
    if (!res.ok) throw new Error(data.message || 'Error en la operación');
    return data;
  }

  // Crear
  document.getElementById('create-form').addEventListener('submit', async (e) => {
    e.preventDefault();
    const msg = document.getElementById('create-msg');
    msg.textContent = 'Creando...';
    const fd = new FormData(e.target);
    const thumbs = (fd.get('thumbnails') || '').split(',').map(s => s.trim()).filter(Boolean);
    const body = {
      title: fd.get('title'),
      description: fd.get('description'),
      code: fd.get('code'),
      price: Number(fd.get('price')),
      status: fd.get('status') === 'true',
      stock: Number(fd.get('stock')),
      category: fd.get('category'),
      thumbnails: thumbs
    };
    try {
      await jsonFetch('/api/products', { method: 'POST', body: JSON.stringify(body) });
      msg.textContent = '✅ Producto creado';
      e.target.reset();
    } catch (err) {
      msg.textContent = '❌ ' + err.message;
    }
  });

  // Eliminar
  document.getElementById('delete-form').addEventListener('submit', async (e) => {
    e.preventDefault();
    const msg = document.getElementById('delete-msg');
    msg.textContent = 'Eliminando...';
    const id = new FormData(e.target).get('id');
    try {
      await jsonFetch(`/api/products/${id}`, { method: 'DELETE' });
      msg.textContent = '✅ Producto eliminado';
      e.target.reset();
    } catch (err) {
      msg.textContent = '❌ ' + err.message;
    }
  });

  // Actualizar
  document.getElementById('update-form').addEventListener('submit', async (e) => {
    e.preventDefault();
    const msg = document.getElementById('update-msg');
    msg.textContent = 'Actualizando...';
    const fd = new FormData(e.target);
    const id = fd.get('id');
    const body = {};
    if (fd.get('price')) body.price = Number(fd.get('price'));
    if (fd.get('stock')) body.stock = Number(fd.get('stock'));
    try {
      await jsonFetch(`/api/products/${id}`, { method: 'PUT', body: JSON.stringify(body) });
      msg.textContent = '✅ Producto actualizado';
      e.target.reset();
    } catch (err) {
      msg.textContent = '❌ ' + err.message;
    }
  });
</script>
